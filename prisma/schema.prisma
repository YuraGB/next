// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Post {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  published   Boolean    @default(true)
  author      User       @relation(fields: [authorId], references: [id])
  authorId    String     @db.ObjectId
  public      Boolean    @default(false)
  image       String?
  publishedAt DateTime   @default(now())
  categories  Category[] @relation(fields: [categoryIDs], references: [id])
  categoryIDs String[]   @db.ObjectId
}

model Category {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String   @default("general")
  postIDs String[] @db.ObjectId
  posts   Post[]   @relation(fields: [postIDs], references: [id])
}

model User {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  email              String
  name               String
  posts              Post[]
  role               Role      @default(USER)
  hashPassword       String
  imageUrl           String?
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  Account            Account?
  Session            Session?

  @@unique([email])
}

model Account {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  userId             String    @unique @db.ObjectId
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @unique @db.ObjectId
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}
