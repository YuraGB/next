generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Post {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  published   Boolean  @default(true)
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String   @db.ObjectId
  public      Boolean  @default(true)
  image       String?
  publishedAt DateTime @default(now())
}

model Rating {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  count     Int      @default(0)
  Tale      Tale[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  tale      Tale     @relation(fields: [taleId], references: [id])
  taleId    String   @db.ObjectId
}

model CategoryTale {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String @unique @default("general")
  tales Tale[]
}

model Tale {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  mainImage        String
  images           String[]
  createdAt        DateTime     @default(now())
  forAge           String
  shortDescription String
  content          String
  categoryTaleId   String       @db.ObjectId
  categoryTale     CategoryTale @relation(fields: [categoryTaleId], references: [id])
  rating           Rating?      @relation(fields: [ratingId], references: [id])
  ratingId         String?      @db.ObjectId
  comments         Comment[]
}

model Slide {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  image       String
  description String?
  url         String?
  title       String?
  Slider      Slider? @relation(fields: [sliderId], references: [id])
  sliderId    String? @db.ObjectId
}

model Slider {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  sliderID String
  title    String
  slide    Slide[]
}

model User {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  email              String
  name               String
  posts              Post[]
  role               Role      @default(USER)
  hashPassword       String
  imageUrl           String?
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  Account            Account?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  comments           Comment[]
  Session            Session?

  @@unique([email])
}

model Account {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  userId             String    @unique @db.ObjectId
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
  VISITOR
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @unique @db.ObjectId
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}
